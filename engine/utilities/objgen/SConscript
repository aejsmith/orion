import os
import util
import SCons.Scanner.C
from subprocess import Popen, PIPE

Import('manager')

env = manager.CreateEnvironment(depends = [
    'external/libclang',
    '3rdparty/mustache',
    '3rdparty/rapidjson',
    'engine/core',
])

if env['PLATFORM'] == 'win32':
    # No getopt on Windows, pull in an implementation of it.
    env['CPPPATH'].append(Dir('../../3rdparty/misc/getopt'))
    extra_sources = ['../../3rdparty/misc/getopt/getopt.c']
else:
    extra_sources = []

# Compile the Mustache template into the objgen binary so we don't have to find
# it at runtime.
def genMustacheHeader(target, source, env):
    import json

    # Read the source.
    with open(str(source[0]), 'r') as sourceFile:
        lines = sourceFile.readlines()

    # Output the file.
    with open(str(target[0]), 'w') as targetFile:
        targetFile.write('const char *g_objgenTemplate =')

        for line in lines:
            # Make the generated code slightly nicer by stripping the newline
            # from lines that only contain a Mustache tag. Could do this in the
            # template but then that is less readable.
            if line[0:2] == '{{' and line[-3:-1] == '}}':
                line = line[:-1]

            # Format the strings appropriately for C++. JSON rules for strings
            # are pretty much equivalent so we can use the json module to do
            # this.
            targetFile.write('\n    %s' % (json.dumps(line)))
        targetFile.write(';\n')
env.Command('objgen.mustache.h', 'objgen.mustache', Action(genMustacheHeader, '$GENCOMSTR'))

manager.baseEnv['OBJGEN'] = env.OrionInternalApplication(
    name = 'objgen',
    sources = ['main.cc'] + extra_sources)

if env['PLATFORM'] == 'win32':
    # SCons will give us MSVC-style arguments, but objgen takes GCC-style.
    manager.baseEnv['OBJGENDEFPREFIX'] = '-D'
    manager.baseEnv['OBJGENINCPREFIX'] = '-I'
    manager.baseEnv['OBJGENFLAGS'] = \
        '${_defines(OBJGENDEFPREFIX, CPPDEFINES, CPPDEFSUFFIX, __env__)} ' + \
        '$( ${_concat(OBJGENINCPREFIX, CPPPATH, INCSUFFIX, __env__, RDirs, TARGET, SOURCE)} $)'
else:
    # libclang doesn't add the compiler's built-in include directory to the default
    # path. Therefore we must get this manually and pass it to objgen.
    incdir = Popen([env['CC'], '-print-file-name=include'], stdout=PIPE).communicate()[0].strip()
    manager.baseEnv['OBJGENFLAGS'] = '$_CPPDEFFLAGS -I%s $_CPPINCFLAGS' % (incdir)

#
# Define builders to run objgen.
#  - ObjgenHeader runs a header through objgen and uses env.Object to build it,
#    and returns that target.
#  - ObjgenSource runs a source file through objgen in standalone mode, and
#    returns the target for that. The result can be included in a source file.
#

# Emitter to add a dependency on objgen for the generated files.
def objgenEmitter(target, source, env):
    Depends(target, env['OBJGEN'])
    return (target, source)

manager.baseEnv['BUILDERS']['_ObjgenHeader'] = Builder(
    action = Action('$OBJGEN $OBJGENFLAGS -e $SOURCE $TARGET', '$OBJGENCOMSTR'),
    emitter = objgenEmitter,
    suffix = '.obj.cc',
    src_suffix = '.h',
    source_scanner = SCons.Scanner.C.CScanner())

# Wrapper method to compile the generated files.
def objgenHeaderMethod(env, source):
    return env.Object(env._ObjgenHeader(source))
manager.baseEnv.AddMethod(objgenHeaderMethod, 'ObjgenHeader')

# We need to filter out the include of the generated source file to prevent a
# dependency cycle. objgen will create the file before parsing it with clang to
# ensure it doesn't error.
class ObjgenSourceScanner:
    def __init__(self):
        self.name = "ObjgenSourceScanner"
        self.path = SCons.Scanner.FindPathDirs("CPPPATH")
    def __call__(self, node, env, path):
        base = SCons.Scanner.C.CScanner()
        deps = base(node, env, path)
        return [dep for dep in deps if str(dep)[-7:] != '.obj.cc']
    def recurse_nodes(self, nodes):
        return nodes
    def select(self, node):
        return self

manager.baseEnv['BUILDERS']['ObjgenSource'] = Builder(
    action = Action('$OBJGEN $OBJGENFLAGS -e -s $SOURCE $TARGET', '$OBJGENCOMSTR'),
    emitter = objgenEmitter,
    suffix = '.obj.cc',
    src_suffix = '.cc',
    source_scanner = ObjgenSourceScanner())
