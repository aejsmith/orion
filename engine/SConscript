import os
import util

Import('manager')

# Base engine. Currently these parts of the engine have inter-dependencies which
# means they can't be built individually, so we build them all into 1 "base"
# component.
base_components = [
    'engine',
    'gpu',
    'input',
    'render_core',
]

# Remaining components making up the full engine.
extra_components = [
    'graphics',
    'physics',
    'render',
]

all_components = ['core'] + base_components + extra_components

# We want to be able to include files by "<module name>/<header>.h", but this
# doesn't match the directory structure. Make a virtual include directory so we
# get the behaviour we want. TODO: In future I want only the modules depended
# on to have their includes available, which is partly why the source directory
# structure is like it is.
for component in all_components:
    VariantDir('include/%s' % (component), '#engine/runtime/%s/include' % (component))

# Always have the engine include directory available.
manager.baseEnv['CPPPATH'] += [Dir('include')]

# Add all 3rd party library components.
SConscript(dirs = ['3rdparty'])

################
# Core library #
################

SConscript(dirs = ['runtime/core'])

#############
# Utilities #
#############

SConscript(dirs = ['utilities'])

###############
# Base engine #
###############

depends = [
    'external/freetype',
    '3rdparty/glslang',
    '3rdparty/imgui',
    '3rdparty/rapidjson',
    'engine/core',
]

if manager.baseEnv['MICROPROFILE']:
    depends += ['3rdparty/microprofile']

if manager.baseEnv['GPU_API'] == 'gl':
    depends += [
        'external/glew',
        '3rdparty/spirv-cross',
    ]
elif manager.baseEnv['GPU_API'] == 'vulkan':
    depends += ['external/vulkan']

env = manager.CreateEnvironment(depends = depends)
Export('env')

manager.AddComponent(
    name = 'engine/base',
    depends = depends,
    objects = SConscript(dirs = [os.path.join('runtime', c) for c in base_components]))

#########################
# Additional components #
#########################

depends = [
    'engine/base',
    'external/bullet',
]

env = manager.CreateEnvironment(depends = depends)
Export('env')

# TODO: These should all be built independently eventually.
manager.AddComponent(
    name = 'engine',
    depends = depends,
    objects = SConscript(dirs = [os.path.join('runtime', c) for c in extra_components]))
